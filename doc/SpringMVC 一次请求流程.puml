@startuml
'https://plantuml.com/sequence-diagram

group 系统启动
    Connector->AbstractProtocol:start()
    AbstractProtocol->AbstractEndpoint:startInternal()
    AbstractEndpoint->NioEndpoint:startInternal()#创建Tomcat线程池启动Poller/Acceptor
    NioEndpoint->Poller:run()#启动Poller等待Acceptor存入事件
    NioEndpoint->Acceptor:run()#启动Acceptor阻塞等待接收客户端请求
end
group 接入请求Acceptor与Poller
    Acceptor-->Acceptor : run()#阻塞等待请求
    Acceptor->Nio2Endpoint : serverSocketAccept()#收到请求
    Nio2Endpoint->Acceptor : 获取到socket
    Acceptor->Poller : 往events中添加socketWrapper
    Poller-->Poller : 循环等待Acceptor往events中放事件，获取事件
    Poller->AbstractEndpoint : processSocket(socketWrapper,event,dispatch)#将socket任务放入线程池
    AbstractEndpoint--> SocketProcessorBase: run()
    SocketProcessorBase--> AbstractEndpoint.SocketProcessor: doRun()#接入请求开始初始化Request/Response
end

group 第一次接入且执行请求
    AbstractEndpoint.SocketProcessor->AbstractProtocol:process(socketWrapper, event)
    AbstractProtocol->AbstractProcessorLight:process(socketWrapper, event)
    AbstractProcessorLight->Http11Processor:service(socketWrapper)#组装Request/Response
    group 执行Adapter
    Http11Processor->CoyoteAdapter:service(request, response)#链接Connector/Container，构造Request/Response
    CoyoteAdapter->StandardEngineValve:invoke(request,response)
    end
    group 执行Valve
    StandardEngineValve->ErrorReportValve:invoke(request, response)
    ErrorReportValve->AuthenticatorBase:invoke(request, response)
    AuthenticatorBase->StandardContextValve:invoke(request, response)
    StandardContextValve->StandardWrapperValve:invoke(request, response)
    StandardWrapperValve->StandardWrapper:initServlet(instance)
    end
    group 初始化Servlet
    StandardWrapper->HttpServletBean:init()
    HttpServletBean->FrameworkServlet:initServletBean()
    FrameworkServlet->FrameworkServlet:initWebApplicationContext()
    FrameworkServlet->DispatcherServlet:onRefresh(ApplicationContext)#初始化SpringMVC Bean
    DispatcherServlet->StandardWrapperValve:返回初始化的Servlet
    end
    group request/response过滤器链
    StandardWrapperValve->ApplicationFilterFactory:添加4个ApplicationFilterChain
    ApplicationFilterFactory->ApplicationFilterChain:doFilter(request,response)
    ApplicationFilterChain->OncePerRequestFilter:doFilter(request,response)
    OncePerRequestFilter->CharacterEncodingFilter:doFilterInternal(httpRequest, httpResponse, filterChain)

    CharacterEncodingFilter->ApplicationFilterChain:doFilter(request,response)
    ApplicationFilterChain->OncePerRequestFilter:doFilter(request,response)
    OncePerRequestFilter->FormContentFilter:doFilterInternal(httpRequest, httpResponse, filterChain)

    FormContentFilter->ApplicationFilterChain:doFilter(request,response)
    ApplicationFilterChain->OncePerRequestFilter:doFilter(request,response)
    OncePerRequestFilter->RequestContextFilter:doFilterInternal(httpRequest, httpResponse, filterChain)

    RequestContextFilter->ApplicationFilterChain:doFilter(request,response)
    ApplicationFilterChain->OncePerRequestFilter:doFilter(request,response)
    OncePerRequestFilter->WsFilter:doFilterInternal(httpRequest, httpResponse, filterChain)

    WsFilter->ApplicationFilterChain:doFilter(request,response)
    note left :执行完过滤器开始分发请求
    end
    group 分发执行请求
    ApplicationFilterChain->FrameworkServlet:servlet.service(request, response)
    FrameworkServlet->HttpServlet:servlet.service(request, response)
    HttpServlet->FrameworkServlet:doGet()
    FrameworkServlet->DispatcherServlet:doService()
    DispatcherServlet->AbstractHandlerMethodAdapter:handle(processedRequest, response, mappedHandler.getHandler())
    AbstractHandlerMethodAdapter->ServletInvocableHandlerMethod:invokeAndHandle(webRequest, mavContainer)
    ServletInvocableHandlerMethod->InvocableHandlerMethod:doInvoke(Object... args)#反射执行请求
    end
    group 处理返回值
    InvocableHandlerMethod->ServletInvocableHandlerMethod:执行请求完成返回
    ServletInvocableHandlerMethod->HandlerMethodReturnValueHandlerComposite:处理返回值
    HandlerMethodReturnValueHandlerComposite->RequestResponseBodyMethodProcessor:处理返回值
    RequestResponseBodyMethodProcessor->AbstractMessageConverterMethodProcessor:write(body, selectedMediaType, outputMessage)
    AbstractMessageConverterMethodProcessor->AbstractHttpMessageConverter:write(body, selectedMediaType, outputMessage)
    AbstractHttpMessageConverter->StringHttpMessageConverter:writeInternal(t, outputMessage)
    StringHttpMessageConverter->StreamUtils:copy且flush
    StreamUtils->用户:数据写到用户段
    end
end
@enduml